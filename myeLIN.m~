addpath(genpath('/home/andrei/Desktop/MyelinationCode/MyelinationToolbox/'));
addpath(genpath('/home/andrei/Desktop/MyelinationCode/'));

subject = '020_S_0097';
lh = fs_read_surf(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/freesurfer/TP2/fs/surf/lh.white']);

newVectorslh = surfAnalysis(lh);

% loading meshes
cd(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/freesurfer/TP2/fs/mri/'])
try
gunzip aparc.a2009s+aseg.mgz
catch
end
try
movefile orig orig2
catch
end
try
gunzip orig.mgz
catch
end
try
catch
gunzip brain.mgz
end

prepareDicomsMyelination('/home/andrei/Desktop/SeanMyelinationControls/ADNI',subject);
cd(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/nii']);
[vol,  M , mr_parms , volsz ] = fs_load_mgh(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/freesurfer/TP2/fs/mri/aparc.a2009s+aseg']);
[volb, Mb, mr_parmsb, volszb] = fs_load_mgh(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/freesurfer/TP2/fs/mri/orig']);
nii = load_nii(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/nii/T1Resliced.nii']);
nii2 = load_nii(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/nii/T2Resliced.nii']);

T1moved = alignNii(nii);
T2moved = alignNii2(nii2);
vole = alignVol(vol);
voleb = alignVol(volb);

newNii = make_nii(voleb, [1 1 1]);
save_nii(newNii, 'origOut.nii');
newNii = make_nii(T2moved, [1 1 1]);
save_nii(newNii, 'T2Out.nii');
newNii = make_nii(T1moved, [1 1 1]);
save_nii(newNii, 'T1Out.nii');

%system(['flirt -in T2Resliced.nii -ref T1Resliced.nii -dof 12 -cost mutualinfo -omat T2toOrig.mat -out T2toOrig']);
system(['fnirt --in=T2Resliced.nii --ref=T1Resliced.nii --iout=T2toOrigFNIRT']);
try
gunzip T2toOrig.nii.gz;
catch
end
cd (['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/freesurfer/TP2/fs/mri'])
try
gunzip brainmask.mgz;
catch
end
[brainmask, Mb, mr_parmsb, volszb] = fs_load_mgh(['brainmask']);
nii3 = load_nii(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/nii/T2toOrig.nii']);
T2moved = alignNii(nii3);
newNii = make_nii(T2moved, [1 1 1]);
save_nii(newNii, 'T2OutOut.nii');

% % registeredNii = alignRegistered(nii3);
% 
% % newNii = make_nii(registeredNii, [1 1 1]);
% % save_nii(newNii, 'T2RegistedWithSkullAligned.nii');
brainer = alignVol(brainmask);

newNii = make_nii(brainer, [1 1 1]);
cd (['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/nii']);
save_nii(newNii, 'brainMask.nii');
T2noSkull = nii3;


brainer = logical(brainer);
finalT = T2moved.*brainer;
finalT1 = T1moved.*brainer;
newNii = make_nii(finalT, [1 1 1]);
cd (['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/nii']);
save_nii(newNii, 'skullT2Out.nii');
newNii = make_nii(finalT1, [1 1 1]);
save_nii(newNii, 'skullT1Out.nii');

[volbrain, Mb, mr_parmsb, volszb] = fs_load_mgh(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/freesurfer/TP2/fs/mri/brain']);
volbrainer = alignVol(volbrain);
newNii = make_nii(volbrainer, [1 1 1]);
save_nii(newNii, 'brainOut.nii');
system(['flirt -in skullT2Out.nii -ref skullT1Out.nii -dof 6 -cost mutualinfo -omat T2toT1_MI.mat -out T2toT1_MIIbrainout']);
gunzip T2toT1_MIIbrainout.nii.gz;
niiFinal = load_nii(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject '/nii/T2toT1_MIIbrainout.nii']);
T2moved = niiFinal.img;


GMlb = vole; 
GMlb(GMlb <  11000) = 0;
GMlb(GMlb >= 11000) = 1;
GMlb = logical(GMlb);
xw = find(GMlb > 0);
GMT1 = voleb.*GMlb;
GMT2 = T2moved.*GMlb;
T1T2 = GMT1./GMT2;
f = find(isnan(T1T2)); T1T2(f) = 0;
f = find(isinf(T1T2)); T1T2(f) = 0;

mapIntensities = weightedIntensity(lh.vertices, newVectorslh, xw, T1T2);
mapIntensities = sqrt(mapIntensities);
nullVals = find(mapIntensities == 0);
mapIntensities2 = mapIntensities;

mapIntensities2(nullVals) = 0;
figure
histogram(mapIntensities2, 500);

figure;
scatter3(lh.vertices(:,1),lh.vertices(:,2),lh.vertices(:,3),[],mapIntensities2);
axis equal tight; 
colormap(hot);
colorbar;
caxis([0.3,0.75])
hold on;

cd(['/home/andrei/Desktop/SeanMyelinationControls/ADNI/' subject])
save('mapVals.mat', 'mapIntensities');
save('transformVals.mat', 'M');
reformater(subject);

